// 모험가의 수 N
// 공포도 X
// 공포도가 X도 이상인 경우 X명 이상 그룹에 참여 가능
// 각 자연수는 공백으로 구분

// N에서 제일 큰수를 찾는다
// N에서 제일 큰 수만큼 배열에서 자신을 포함하고 제일 작은 숫자부터 N-1의 갯수만큼 숫자를 뻰서 새로운 배열 생성
// 남은 N의 숫자들에서 위에 두가지 방법을 반복한다
// N < 남은 숫자 가 될때까지 반복하고 남은 숫자가 N보다 크다면 총 만들어진 배열의 갯수를 리턴
// ex. N : 5, fear : [2 3 1 2 2]
    // 제일 큰 수 : 3, N - 1의 갯수만큼 제일 작은 수 : [1, 2, 3], 남은 수 2, 2
    // 제일 큰 수 : 2, N - 1의 갯수만큼 제일 작은 수 : [2, 2], 남은 수 0 -> 종료
    // 리턴 : 2

    function countGroups(N, fears) {
        fears.sort(); // 모험가 공포도를 오름차순으로 정렬
      
        let count = 0; // 총 그룹의 수
        let adventure = 0; // 현재 그룹에 포함된 모험가의 수
      
        for (let i = 0; i < N; i++) { // 각 모험가의 공포도를 하나씩 확인하고, 현재 공포도에 해당하는 모험가가 그룹에 추가될 수 있는지를 체크
          const fear = fears[i]; // 현재 모험가의 공포도를 fear에 할당
      
          adventure++; // 공포도가 작은 모험가부터 차례대로 그룹에 추가
      
          if (adventure >= fear) { // 현재 그룹에 속한 모험가들의 최소 공포도를 만족하면
            count++; // 그룹의 수를 증가시키고
            adventure = 0; // 현재 그룹에 포함된 모험가의 수를 초기화
          }
        }
      
        return count;
      }
      
      
      console.log(countGroups(5,[2, 3, 1, 2, 2]))
